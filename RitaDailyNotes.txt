on - 1 off -0 ---------------->Ascii/unicode(16)

			a- 97-01010101
			
s.l :- design the website

p.l :- develop softwares
			
								computer languages 
				scripting languages				programming languages
				
		html,css,js,ts......					pop				oop
		
										basic,fortan,python..		pyhton,java,.net........


security :- encapsulation , Abstraction

performance :- Inheritance , Polymorphism


java:- 

(1)portable :- 

(2)GarbageCollector :- 

sunmicrosystems :- 

GreenTalk(.gt)---------------->oak -------------->java(.java)

jdk 1.0------------------------------------------>jdk 24

jse/j2se:- core java -Standalone app's[no client-server]

jee/j2ee:- core java + adj java - web app's ,distributed app's [client-server]

jme/j2me :- java  ----->mobile app's



			ecllipse ide shortcuts :- 
			
			main,syso :- ctrl +space
			
			format :- ctrl+shift+f
			

Varaibles :- 
---------

			datatype variableName;  //declaration of a variableName
			
			
			datatype variableName = value ; //initialization of a variable
			
									Varaibles
			
		(1)LocalVaraible(inside the method)		(2)Global Varaibles(outside the method)
												
												static  g.v					instance g.v
		

syntax:- 
======

static:-   static  datatype variableName = value;

instance:-   datatype variableName = value;


access:- 
=======
static:- Static prop's can be accessed using class reference

instance:- instance prop's cab be accessed using object reference

				syntax for obj creation:- 
				
			ClassName objName = new ClassName();	
				
				

memory location:-
===============

static:- static prop's will gets the memory area only once when the class loads into the jvm

instance:- instance prop's will gets the memory area for every object creation

usage:- 
=====

static:-used to store the common data

instance:- used to store the unique data


in the memory:-
=============

static:- Method area

instance:- Heap area

operators :- ULTRA AB
=========

						A + B (Operands)

Uniary 

Logical

Terinary

Relational 

Assignment

Arithematic 

Bitwise


Flow Control Statements:- 

(1)Conditional statements

(2)Loops 


methods :-  	(1)static 					//dynamic

		syntax :-  accessmodifier   returntype methodName(params...){
		
		
				//method body
						}
						

class = variable + methods 

						
Inheritance :- Accquring the parent class prop's to the child class.

					
					extends 				implements
				cls--->cls					interface---->clss




class A{      //Parent/super

100 methods
}

class B extends A{   //base/child

1 method+ 100 methods

}
					

class A{						class B{

add(int a,int b){				add(int a,int b){
	
a+b;							a*b;	
	
}								}	
}								}

class C extends A,B{

	add(4,5);  

}


*M.I is not supported in java @ Class Level

*M.I is supported in java @interface level


methods :- based on the method body.2 types 
-------
		(1)concrete method :- methods with method body/implementation
		
				syntax :-  accessmodifier   returntype methodName(params...){
		
		
				//method body
						}
		
		
		(2)abstract method :- methods with out method body/implementation
						
				syntax :-  accessmodifier   returntype methodName(params...);
				
				
				
	
	
	class = collection of only concrete methods
	
	abstract class = collection of both concrete + abstract methods
	
	interface = collection of only abstract methods.
	
	
Abstraction :- Hiding the logic/data .
------------

Polymorphism :- 
------------
(1)MethodOverloading :- method name is same but params are diff.
						(1)type of params
						(2)order of params
						(3)number of params

(2)Methodoverriding:- method name is same but method body/implementation diff.

class Parent{

100 Cr()

marriage(){ kajol}

relatives()
}
	
	class Child extends Parent{

100 Cr()

@Override
marriage(){ deepika}

relatives()


	}
	
	
Encapsulation:- wraps the data into a single unit to provide the security.
==============
	
	acessmodifiers
	
	
	constructor:- to initialize the objects
	===========
	
	(1)default constructor
	
	syntax :- 
	
				accessmodifier className(){
				
					//body
				}
				
	
	(2)parametrized constructor
	syntax :- 
	
				accessmodifier className(params..){
				
					//body
				}
				
				
				
	Exception :-  try catch finally throw throws


arrays :- collection of homogenous data

		
		(1)int arr[] = new int[arr length];
		
		(2)int arr[] = {1,2,2,3,4,5,5,6,6,7,7,7}
		
		(3)int arr[] = new int[]{1,2,2,3,4,5,5,6,6,7,7,7};
		
		
		
	(1)It can accept only similar type of data

	(2)Fixed in size
	
	(3)No utility methods



Collections :- framework
============

(1)It can accept both similar nd disimilar type of data

(2)Not Fixed in size
	
(3)Lots of  utility methods


If our frequent operation is :- 

------->insertion or deletion in the middle then linkedlist is better

------->selection of an obj in the middle then arraylist is better







